// redux/service/asyncStorageService.js
import AsyncStorage from "@react-native-async-storage/async-storage";
export const storeToken = async (value) => {
  try {
    await AsyncStorage.setItem("token", value);
  } catch (error) {
    console.log(error);
  }
};
export const getToken = async () => {
  try {
    const token = await AsyncStorage.getItem("token");
    return token !== null ? token : null;
  } catch (error) {
    console.log(error);
  }
};
export const removeToken = async () => {
  try {
    await AsyncStorage.removeItem("token");
  } catch (error) {
    console.log(error);
  }
};
// redux/slices/authSlice.js
import { createSlice } from "@reduxjs/toolkit";
const initialState = {
  user: null,
  token: null,
  isAuth: false,
};
const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setCredentials: (state, { payload }) => {
      state.user = payload.user;
      state.token = payload.token;
      state.isAuth = true;
    },
    logout: (state) => {
      state.user = null;
      state.token = null;
      state.isAuth = false;
    },
    updateUserProfile: (state, { payload }) => {
      state.user = { ...state.user, ...payload };
    },
  },
});
export const { setCredentials, logout, updateUserProfile } = authSlice.actions;

export default authSlice.reducer;


//redux/services/auth
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { Platform } from "react-native";
// const getBaseUrl = () => {
//   if (__DEV__) {
//     if (Platform.OS === "android") {
//       return "http://192.168.16.147:8000/api/";
//     }
//     return "http://localhost:8000/api/";
//   }
// };
const getBaseUrl = () => {
  return "https://onetabbackedn.onrender.com/api/";
};

export const schoolApi = createApi({
  reducerPath: "schoolApi",
  baseQuery: fetchBaseQuery({
    baseUrl: getBaseUrl(),
    prepareHeaders: (headers, { getState }) => {
      // Get the token from the auth state
      const token = getState().auth.token;

      // If we have a token, add it to authorization header
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }

      return headers;
    },
  }),
  endpoints: (builder) => ({
    // AUTH ENDPOINTS
    signupUser: builder.mutation({
      query: (user) => ({
        url: "signup",
        method: "POST",
        body: user,
      }),
    }),
    verifyEmail: builder.mutation({
      query: (user) => ({
        url: "verifyEmail",
        method: "POST",
        body: user,
      }),
    }),
    loginUser: builder.mutation({
      query: (user) => ({
        url: "login",
        method: "POST",
        body: user,
      }),
    }),
    changePassword: builder.mutation({
      query: (formdata) => ({
        url: "change-password",
        method: "POST",
        body: formdata,
      }),
    }),
    
    resetPassword: builder.mutation({
      query: ({ id, token, password }) => ({
        url: `resetPassword/${id}/${token}`,
        method: "POST",
        body: { password },
      }),
    }),
    getUserProfile: builder.query({
      query: () => "profile",
    }),
    getAllUsers: builder.query({
      query: () => "user",
    }),
    updateProfileImage: builder.mutation({
      query: (formData) => ({
        url: "update-profile-image",
        method: "POST",
        body: formData,
        // Don't manually set Content-Type for FormData
        // The browser/fetch will set it with the boundary
        formData: true,
      }),
    }),

    // Request OTP for login
    requestLoginOtp: builder.mutation({
      query: (data) => ({
        url: "request-login-otp",
        method: "POST",
        body: data,
      }),
    }),
    this is snipt so chake snipt only i am not giving u other router for lenthy issue 

    // redux/slices/authSlice.js
import { createSlice } from "@reduxjs/toolkit";
const initialState = {
  user: null,
  token: null,
  isAuth: false,
};
const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setCredentials: (state, { payload }) => {
      state.user = payload.user;
      state.token = payload.token;
      state.isAuth = true;
    },
    logout: (state) => {
      state.user = null;
      state.token = null;
      state.isAuth = false;
    },
    updateUserProfile: (state, { payload }) => {
      state.user = { ...state.user, ...payload };
    },
  },
});
export const { setCredentials, logout, updateUserProfile } = authSlice.actions;

export default authSlice.reducer;


// redux/thunks/authThunks.js
import AsyncStorage from "@react-native-async-storage/async-storage";
import { setCredentials, logout, updateUserProfile } from "../slices/authSlice";
export const loginAndPersist = (payload) => async (dispatch) => {
  try {
    await AsyncStorage.setItem("token", payload.token);
    await AsyncStorage.setItem("userData", JSON.stringify(payload.user));
    dispatch(setCredentials(payload));
  } catch (error) {
    console.error("Login persistence error:", error);
  }
};

export const logoutAndClear = () => async (dispatch) => {
  try {
    await AsyncStorage.removeItem("token");
    await AsyncStorage.removeItem("userData");
    dispatch(logout());
  } catch (error) {
    console.error("Logout cleanup error:", error);
  }
};
export const updateProfileAndPersist =
  (updatedUser) => async (dispatch, getState) => {
    try {
      dispatch(updateUserProfile(updatedUser));
      const { user } = getState().auth;
      await AsyncStorage.setItem("userData", JSON.stringify(user));
    } catch (error) {
      console.error("Profile update error:", error);
    }
  };
export const bootstrapAuth = () => async (dispatch) => {
  try {
    const token = await AsyncStorage.getItem("token");
    const userDataString = await AsyncStorage.getItem("userData");
    if (token && userDataString) {
      const user = JSON.parse(userDataString);
      dispatch(setCredentials({ token, user }));
    }
  } catch (error) {
    console.error("Bootstrap error:", error);
  }
};
//src/redux/store.js
import { configureStore } from '@reduxjs/toolkit'
import { setupListeners } from '@reduxjs/toolkit/query'
import { schoolApi } from './services/auth'
import authReducer from './slices/authSlice';

export const store = configureStore({
  reducer: {
    [schoolApi.reducerPath]: schoolApi.reducer,
    auth: authReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(schoolApi.middleware),
})

setupListeners(store.dispatch)